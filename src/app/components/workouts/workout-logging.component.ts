import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { CharacterService } from '../services/character.service';
import { Workout } from '../models/workout.model';
import { Character } from 'backend/models/character';

@Component({
  selector: 'workout-page',
  templateUrl: './workout-logging.component.html',
  styleUrls: ['./workout-logging.component.scss'],
  standalone: true,
  imports: [CommonModule, RouterModule],
})
export class WorkoutComponent implements OnInit {
  isRunning: boolean = false;
  private timer: any;
  currentTime: number = 0;
  character?: Character;

  completedExercises: { [key: string]: boolean } = {};
  completedAchievements: { [key: string]: boolean } = {};

  totalXpGained: number = 0;
  routesCompleted: number = 0;

  notification: { show: boolean; message: string } = {
    show: false,
    message: '',
  };

  workouts: Workout[] = [];

  // –î–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
  runnerWorkouts: Workout = {
    exercises: [
      {
        name: 'üèÉ‚Äç‚ôÇÔ∏è Running session',
        description: 'Run for 10-15 minutes at a comfortable pace',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
      {
        name: 'Stretching',
        description: 'Stretch your legs and back',
        xpReward: 'XP + 40',
        xpValue: 40,
      },
      {
        name: 'Interval sprints',
        description: '30 seconds sprint, 1 minute rest (x5)',
        xpReward: 'XP + 60',
        xpValue: 60,
      },
      {
        name: 'Cool down',
        description: 'Walk for 5 minutes to cool down',
        xpReward: 'XP + 30',
        xpValue: 30,
      },
    ],

    achievements: [
      {
        name: 'üóæ Distance goals',
        description: 'Reach new horizons',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 50,
        target: 20,
        currentValue: 0,
        unit: 'km',
        completed: false,
      },
      {
        name: 'üìà Pace master',
        description: 'Maintain steady speed',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 60,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: '‚è±Ô∏è Interval training',
        description: 'Master speed variation',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 50,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üèÉ Sprint champion',
        description: 'Achieve your best speed record',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 65,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üåÑ Hill conqueror',
        description: 'Master running uphill',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 80,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üå± Trail blazer',
        description: 'Explore off-road running paths',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 75,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üèÅ Race finisher',
        description: 'Complete a virtual race',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 90,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üîÑ Consistency champion',
        description: 'Run regularly for a whole week',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 85,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
    ],

    progress: {
      routesCompleted: 0,
      totalXpGained: 0,
    },
  };

  ascenderWorkouts: Workout = {
    exercises: [
      {
        name: 'üßóüèº Climbing session',
        description: 'Focus on basic routes',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
      {
        name: 'Plank',
        description: 'Hold for 30 seconds',
        xpReward: 'XP + 40',
        xpValue: 40,
      },
      {
        name: 'Rest between attempts',
        description: '',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
      {
        name: 'Different wall angles',
        description: '',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
    ],

    achievements: [
      {
        name: 'ü¶æ Grip strength',
        description: 'Master your grip power',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 50,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üß≠ Route master',
        description: 'Conquer different routes',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 60,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üß© Problem solver',
        description: 'Find solutions for routes',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 75,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: '‚è±Ô∏è Speed climber',
        description: 'Beat your previous times on familiar routes',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 65,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üîÑ Endurance expert',
        description: 'Maintain climbing stamina for longer sessions',
        progressDescription: 'Achievement progress + 50',
        progress: 0,
        xpReward: 80,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üßó Dynamic mover',
        description: 'Master dynamic movements and jumps',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 70,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'ü¶∂ Footwork finesse',
        description: 'Develop precise foot placement techniques',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 55,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üåä Flow state',
        description: 'Climb with fluid, continuous movements',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 90,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
    ],

    progress: {
      routesCompleted: 0,
      totalXpGained: 0,
    },
  };

  zenWarriorWorkouts: Workout = {
    exercises: [
      {
        name: 'üßò‚Äç‚ôÄÔ∏è Yoga session',
        description: 'Begin with basic poses',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
      {
        name: 'Breathing exercise',
        description: 'Focus on deep breathing for 2 minutes',
        xpReward: 'XP + 40',
        xpValue: 40,
      },
      {
        name: 'Sun salutation sequence',
        description: 'Complete 5 rounds',
        xpReward: 'XP + 60',
        xpValue: 60,
      },
      {
        name: 'Meditation',
        description: 'Quiet your mind for 5 minutes',
        xpReward: 'XP + 50',
        xpValue: 50,
      },
    ],

    achievements: [
      {
        name: '‚ú® Perfect form',
        description: 'Focus on alignment',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 60,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üßò Mind master',
        description: 'Develop inner calm',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 70,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üçÉ Breath guide',
        description: 'Control your breath',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 55,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üåà Flow sequence',
        description: 'Master flowing between poses',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 75,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üß† Meditation adept',
        description: 'Achieve deeper meditation states',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 80,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üåô Moonlight practice',
        description: 'Complete evening yoga sessions',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 65,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: '‚òÄÔ∏è Morning ritual',
        description: 'Establish a consistent morning routine',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 70,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
      {
        name: 'üîÑ Balanced life',
        description: 'Integrate yoga into daily life',
        progressDescription: 'Achievement progress: +50',
        progress: 0,
        xpReward: 90,
        target: 30,
        currentValue: 0,
        unit: 'minutes',
        completed: false,
      },
    ],

    progress: {
      routesCompleted: 0,
      totalXpGained: 0,
    },
  };

  constructor(
    private router: Router,
    private characterService: CharacterService
  ) {}

  ngOnInit() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ localStorage
    const savedCharacter = localStorage.getItem('selectedCharacter');
    if (savedCharacter) {
      this.character = JSON.parse(savedCharacter);
      console.log('Loaded character in workout component:', this.character);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (this.character && !this.character.achievements) {
        this.character.achievements = [];
        console.warn(
          'No achievements found for character, initializing empty array'
        );
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (this.character && !this.character.stats) {
        this.character.stats = {
          totalWorkouts: 0,
          totalXpGained: 0,
        };
        console.warn(
          'No stats found for character, initializing default values'
        );
      }

      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.loadWorkoutsForCharacterClass();
    } else {
      console.warn('No character found, redirecting...');
      this.router.navigate(['/character-creation']);
      return;
    }

    if (this.workouts.length > 0) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º completedExercises
      this.workouts[0].exercises.forEach((exercise) => {
        this.completedExercises[exercise.name] = false;
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º completedAchievements –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
      this.workouts[0].achievements.forEach((achievement) => {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        this.completedAchievements[achievement.name] = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –æ–Ω–æ
        if (this.character && this.character.achievements) {
          const characterAchievement = this.character.achievements.find(
            (a: any) => a.name === achievement.name
          );

          if (characterAchievement) {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            this.completedAchievements[achievement.name] =
              characterAchievement.completed || false;

            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ
            if (characterAchievement.completed) {
              console.log(`Achievement ${achievement.name} already completed`);
            }
          } else {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if (this.character.achievements) {
              this.character.achievements.push({
                ...achievement,
                progress: 0,
                completed: false,
              });
            }
          }
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (this.character) {
        console.log(
          'Saving character after achievement initialization:',
          this.character
        );
        this.characterService.saveCharacter(this.character);
        localStorage.setItem(
          'selectedCharacter',
          JSON.stringify(this.character)
        );
      }

      console.log(
        'Initialized achievements state:',
        this.completedAchievements
      );
    } else {
      console.warn('No workouts loaded');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  loadWorkoutsForCharacterClass() {
    if (!this.character) return;

    console.log('Loading workouts for character:', this.character.name);

    switch (this.character.name) {
      case 'Runner':
        this.workouts = [this.runnerWorkouts];
        console.log('Loaded Runner workouts');
        break;
      case 'Ascender':
        this.workouts = [this.ascenderWorkouts];
        console.log('Loaded Ascender workouts');
        break;
      case 'Zen Warrior':
        this.workouts = [this.zenWarriorWorkouts];
        console.log('Loaded Zen Warrior workouts');
        break;
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –±–µ–≥—É–Ω–∞
        this.workouts = [this.runnerWorkouts];
        console.warn('Unknown character class, defaulting to Runner workouts');
    }
  }

  startTimer() {
    if (!this.isRunning) {
      this.isRunning = true;
      this.timer = setInterval(() => {
        this.currentTime++;
      }, 1000);
    }
  }

  pauseTimer() {
    this.isRunning = false;
    clearInterval(this.timer);
  }

  stopTimer() {
    this.isRunning = false;
    clearInterval(this.timer);
    this.currentTime = 0;
  }

  formatTime(seconds: number): string {
    return new Date(seconds * 1000).toISOString().slice(11, 19);
  }

  completeExercise(exercise: any) {
    if (!this.isRunning) {
      this.showNotification('Start the timer first!');
      return;
    }

    if (!this.completedExercises[exercise.name]) {
      this.completedExercises[exercise.name] = true;

      const xpAmount =
        exercise.xpValue ||
        parseInt(exercise.xpReward?.replace('XP + ', '')) ||
        0;
      this.totalXpGained += xpAmount;
      this.workouts[0].progress.totalXpGained += xpAmount;

      this.showNotification(`Completed: ${exercise.name}! +${xpAmount} XP`);
    }
  }

  completeAchievement(achievement: any) {
    if (!this.isRunning) {
      this.showNotification('Start the timer first!');
      return;
    }

    if (this.completedAchievements[achievement.name]) {
      this.showNotification(
        `Achievement ${achievement.name} already completed!`
      );
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
    this.completedAchievements[achievement.name] = true;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
    const xpAmount = achievement.xpReward || 50;
    this.totalXpGained += xpAmount;
    this.workouts[0].progress.totalXpGained += xpAmount;
    this.routesCompleted++;
    this.workouts[0].progress.routesCompleted++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏ –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (!this.character) {
      console.error('Character is undefined, cannot update achievements');
      this.showNotification(
        `Achievement: ${achievement.name}! +${xpAmount} XP`
      );
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!this.character.achievements) {
      this.character.achievements = [];
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const characterAchievementIndex = this.character.achievements.findIndex(
      (a: any) => a.name === achievement.name
    );

    if (characterAchievementIndex !== -1) {
      console.log('Updating achievement in character:', achievement.name);
      this.character.achievements[characterAchievementIndex].progress = 100; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 100%
      this.character.achievements[characterAchievementIndex].completed = true; // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    } else {
      console.log(
        'Achievement not found in character object:',
        achievement.name
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
      this.character.achievements.push({
        ...achievement,
        progress: 100,
        completed: true,
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ localStorage
    localStorage.setItem('selectedCharacter', JSON.stringify(this.character));

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ
    this.characterService.saveCharacter(this.character);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification(`Achievement: ${achievement.name}! +${xpAmount} XP`);
  }

  showNotification(message: string) {
    this.notification = { show: true, message };

    // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      this.notification = { show: false, message: '' };
    }, 3000);
  }

  completeWorkout() {
    if (this.workouts.length === 0) {
      this.showNotification('No workout loaded!');
      return;
    }

    const hasCompletedExercises = Object.values(this.completedExercises).some(
      (completed) => completed
    );
    const hasCompletedAchievements = Object.values(
      this.completedAchievements
    ).some((completed) => completed);

    if (!hasCompletedExercises && !hasCompletedAchievements) {
      this.showNotification('Complete at least one exercise or achievement!');
      return;
    }

    const allExercisesCompleted = Object.values(this.completedExercises).every(
      (completed) => completed
    );
    if (allExercisesCompleted) {
      const bonusXP = Math.round(this.totalXpGained * 0.25);
      this.totalXpGained += bonusXP;
      this.workouts[0].progress.totalXpGained += bonusXP;
      this.showNotification(
        `Bonus for completing all exercises: +${bonusXP} XP!`
      );
    }

    try {
      if (!this.character) {
        this.showNotification('No character loaded!');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
      const levelInfo = this.characterService.addExperience(this.totalXpGained);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º stats
      if (!this.character.stats) {
        this.character.stats = {
          totalWorkouts: 0,
          totalXpGained: 0,
        };
      }

      // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ–ø—ã—Ç–∞
      const currentWorkouts = this.character.stats.totalWorkouts || 0;
      const currentXpGained = this.character.stats.totalXpGained || 0;

      this.character.stats.totalWorkouts = currentWorkouts + 1;
      this.character.stats.totalXpGained = currentXpGained + this.totalXpGained;

      console.log('Updated character stats:', this.character.stats);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      const currentProgress = this.characterService.getCurrentProgress();

      // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.character.level = currentProgress.level;
      this.character.xp = currentProgress.experience;
      this.character.xpToNextLevel = currentProgress.experienceToNextLevel;

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!this.character.achievements) {
        this.character.achievements = [];
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö —Å—Ç–∞—Ç—É—Å
      Object.keys(this.completedAchievements).forEach((achievementName) => {
        if (this.completedAchievements[achievementName] && this.character) {
          const achievementIndex = this.character.achievements.findIndex(
            (a: any) => a.name === achievementName
          );

          if (achievementIndex !== -1) {
            console.log(`Marking achievement as completed: ${achievementName}`);
            this.character.achievements[achievementIndex].completed = true;
            this.character.achievements[achievementIndex].progress = 100;
          }
        }
      });

      console.log(
        'Saving updated character with achievements and stats:',
        this.character
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ª–æ–∫–∞–ª—å–Ω–æ
      this.characterService.saveCharacter(this.character);

      // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
      localStorage.setItem('selectedCharacter', JSON.stringify(this.character));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      this.characterService
        .updateProfile(this.character.name, this.character)
        .subscribe({
          next: (response) => {
            console.log('Profile updated successfully:', response);
            this.showNotification('Progress saved!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
            if (levelInfo && levelInfo.leveledUp) {
              this.showNotification(
                `Level Up! You are now level ${levelInfo.newLevel}!`
              );
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            setTimeout(() => {
              this.router.navigate(['/character-profile']);
            }, 1500);
          },
          error: (error) => {
            console.error('Error updating profile:', error);
            this.showNotification('Error saving progress!');

            // –î–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            setTimeout(() => {
              this.router.navigate(['/character-profile']);
            }, 1500);
          },
        });
    } catch (error) {
      console.error('Error saving workout progress:', error);
      this.showNotification('Error saving progress!');

      this.stopTimer();

      setTimeout(() => {
        this.router.navigate(['/character-profile']);
      }, 1500);
    }
  }
}
